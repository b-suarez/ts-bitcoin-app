{"version":3,"sources":["components/assets/bitcoinLogo.png","components/LoadingCard.tsx","api/Bitcoin.ts","components/BitcoinValueCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LoadingCard","props","Box","width","height","Skeleton","variant","style","marginBottom","getBitcoinJson","a","async","fetch","res","json","console","error","BitcoinValueCard","Grid","item","xs","className","code","rate_float","App","state","bitcoinInfo","isLoading","cardmessage","this","setState","time","updated","ValueCards","Object","values","bpi","map","card","key","container","direction","justify","alignItems","src","bitcoinLogo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,yC,4SCyB5BC,EApBe,SAAAC,GAC5B,OACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,QAAQC,OAAO,SACxB,kBAACC,EAAA,EAAD,CACEC,QAAQ,OACRH,MAAM,OACNC,OAAO,MACPG,MAAO,CAAEC,aAAc,QAEzB,kBAACH,EAAA,EAAD,CACEC,QAAQ,OACRH,MAAM,MACNC,OAAO,MACPG,MAAO,CAAEC,aAAc,QAEzB,kBAACH,EAAA,EAAD,CAAUC,QAAQ,OAAOH,MAAM,MAAMC,OAAO,UCpBrCK,EAAiB,0BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAERE,MAChB,sDAHwB,cAEpBC,EAFoB,kBAAAH,EAAA,MAKbG,EAAIC,QALS,wEAO1BC,QAAQC,MAAR,MAP0B,yDCsBfC,G,MAbsD,SAAAhB,GACnE,OACE,kBAACiB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,yBAAKC,UAAU,8BACb,0BAAMA,UAAU,mBACd,0BAAMA,UAAU,sBAAsBpB,EAAMqB,KAA5C,MACCrB,EAAMsB,gB,iBC6FFC,E,2MA5EbC,MAAQ,CACNC,YAAa,GACbC,WAAW,EACXC,YAAa,I,qLAIanB,K,OAApBiB,E,OACNG,KAAKC,SAAS,CACZJ,cACAC,WAAW,EACXC,YAAaF,EAAYK,KAAKC,U,8LAKNvB,K,OAApBiB,E,OACNG,KAAKC,SAAS,CACZJ,cACAC,WAAW,EACXC,YAAaF,EAAYK,KAAKC,U,gFAKhC,IAAIC,EAcJ,OAXEA,GAD2B,IAAzBJ,KAAKJ,MAAME,UACAO,OAAOC,OAAON,KAAKJ,MAAMC,YAAYU,KAAKC,KAAI,SAAAC,GAAI,OAC7D,kBAAC,EAAD,CACEC,IAAKD,EAAKhB,KACVA,KAAMgB,EAAKhB,KACXC,WAAYe,EAAKf,gBAIR,kBAAC,EAAD,MAIb,kBAACL,EAAA,EAAD,CACEsB,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXtB,UAAU,qCAEV,kBAACH,EAAA,EAAD,CACEsB,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXtB,UAAU,wBAEV,kBAACH,EAAA,EAAD,CAAMC,MAAI,GACR,yBAAKhB,MAAM,QAAQyC,IAAKC,IAAaC,IAAI,UAE3C,kBAAC5B,EAAA,EAAD,CACEsB,WAAS,EACTC,UAAU,SACVC,QAAQ,aACRC,WAAW,UAEVV,GAEH,kBAACf,EAAA,EAAD,CAAMC,MAAI,EAACE,UAAU,eACnB,0BAAMA,UAAU,oBAAhB,eACeQ,KAAKJ,MAAMG,oB,GApEpBmB,IAAMC,WCnBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7450c455.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoinLogo.8ee75c23.png\";","import React from \"react\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport \"./LoadingCard.css\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nconst LoadingCard: React.FC = props => {\r\n  return (\r\n    <Box width=\"200px\" height=\"200px\">\r\n      <Skeleton\r\n        variant=\"rect\"\r\n        width=\"100%\"\r\n        height=\"60%\"\r\n        style={{ marginBottom: \"5%\" }}\r\n      />\r\n      <Skeleton\r\n        variant=\"rect\"\r\n        width=\"80%\"\r\n        height=\"10%\"\r\n        style={{ marginBottom: \"5%\" }}\r\n      />\r\n      <Skeleton variant=\"rect\" width=\"80%\" height=\"10%\" />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoadingCard;\r\n","export const getBitcoinJson = async () => {\r\n  try {\r\n    const res = await fetch(\r\n      \"https://api.coindesk.com/v1/bpi/currentprice.json\"\r\n    );\r\n    return await res.json();\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"./BitcoinValueCard.css\";\r\n\r\ninterface BitcoinCardProps {\r\n  code: string;\r\n  rate_float: number;\r\n}\r\n\r\nexport const BitcoinValueCard: FunctionComponent<BitcoinCardProps> = props => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <div className=\"value-card standard-shadow\">\r\n        <span className=\"value-card-text\">\r\n          <span className=\"primary-color-text\">{props.code}: </span>\r\n          {props.rate_float}\r\n        </span>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BitcoinValueCard;\r\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport \"./App.css\";\nimport \"./components/LoadingCard\";\nimport { getBitcoinJson } from \"./api/Bitcoin\";\nimport LoadingCard from \"./components/LoadingCard\";\nimport BitcoinValueCard from \"./components/BitcoinValueCard\";\nimport bitcoinLogo from \"./components/assets/bitcoinLogo.png\";\n\ntype CoindeskCurrency = {\n  code: string;\n  symbol: string;\n  rate: string;\n  description: string;\n  rate_float: number;\n};\ntype CoindeskDictionary = {\n  time: {\n    updated: string;\n    updatedISO: string;\n    updateduk: string;\n  };\n  disclaimer: string;\n  chartName: string;\n  bpi: {\n    USD: CoindeskCurrency;\n    GBP: CoindeskCurrency;\n    EUR: CoindeskCurrency;\n  };\n};\n\nclass App extends React.Component {\n  state = {\n    bitcoinInfo: {} as CoindeskDictionary,\n    isLoading: true,\n    cardmessage: \"\"\n  };\n\n  async componentDidMount() {\n    const bitcoinInfo = await getBitcoinJson();\n    this.setState({\n      bitcoinInfo,\n      isLoading: false,\n      cardmessage: bitcoinInfo.time.updated\n    });\n  }\n\n  async componentDidUpdate() {\n    const bitcoinInfo = await getBitcoinJson();\n    this.setState({\n      bitcoinInfo,\n      isLoading: false,\n      cardmessage: bitcoinInfo.time.updated\n    });\n  }\n\n  render() {\n    let ValueCards;\n\n    if (this.state.isLoading === false) {\n      ValueCards = Object.values(this.state.bitcoinInfo.bpi).map(card => (\n        <BitcoinValueCard\n          key={card.code}\n          code={card.code}\n          rate_float={card.rate_float}\n        />\n      ));\n    } else {\n      ValueCards = <LoadingCard />;\n    }\n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        className=\"fill-viewport gradient-background\"\n      >\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          className=\"card standard-shadow\"\n        >\n          <Grid item>\n            <img width=\"200px\" src={bitcoinLogo} alt=\"icon\" />\n          </Grid>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n          >\n            {ValueCards}\n          </Grid>\n          <Grid item className=\"card-footer\">\n            <span className=\"card-footer-text\">\n              Updated on: {this.state.cardmessage}\n            </span>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}